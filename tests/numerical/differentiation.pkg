# Numerical Differentiation Package

# Forward Difference
void ForwardDifference(f, x, h) {
    return (f(x + h) - f(x)) / h;
}

# Backward Difference
void BackwardDifference(f, x, h) {
    return (f(x) - f(x - h)) / h;
}

# Central Difference
void CentralDifference(f, x, h) {
    return (f(x + h) - f(x - h)) / (2 * h);
}

# Higher-Order Forward Difference
void ForwardDifferenceHigherOrder(f, x, h,  order) {
    result = 0.0;
    for ( i = 0; i <= order; i++) {
        result += math.Pow(-1, i) * binomialCoefficient(order, i) * f(x + (order - i) * h) / math.Pow(h, order);
    }
    return result;
}

# Higher-Order Backward Difference
void BackwardDifferenceHigherOrder(f, x, h,  order) {
    result = 0.0;
    for ( i = 0; i <= order; i++) {
        result += math.Pow(-1, i) * binomialCoefficient(order, i) * f(x - (order - i) * h) / math.Pow(h, order);
    }
    return result;
}

# Numerical Derivative of Arbitrary Order
void NumericalDerivative(f, x, h,  order) {
    if (order == 1) {
        return CentralDifference(f, x, h);
    } else if (order > 1) {
        return ForwardDifferenceHigherOrder(f, x, h, order);
    } else {
        return 0.0; // Invalid order
    }
}

# Example Functions
void exampleFunction(x) {
    return x * x + 2 * x + 1; // Example function: f(x) = x^2 + 2x + 1
}

void exampleFunction2(x) {
    return math.Sin(x); // Example function: f(x) = math.Sin(x)
}

# Binomial Coefficient Calculation
void  binomialCoefficient( n,  k) {
    if (k > n) { return 0; }
    if (k == 0 || k == n) { return 1; }
    return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);
}

# Example usage
void exampleUsage() {
    x = 1.0;
    h = 0.01;

    # First-order derivative of exampleFunction
    firstOrderDerivative = ForwardDifference(exampleFunction, x, h);
    console.Println("First-order derivative:", firstOrderDerivative);

    # Second-order derivative of exampleFunction
    secondOrderDerivative = NumericalDerivative(exampleFunction, x, h, 2);
    console.Println("Second-order derivative:", secondOrderDerivative);

    # First-order derivative of exampleFunction2
    firstOrderDerivative2 = ForwardDifference(exampleFunction2, x, h);
    console.Println("First-order derivative of math.Sin(x):", firstOrderDerivative2);

    # Second-order derivative of exampleFunction2
    secondOrderDerivative2 = NumericalDerivative(exampleFunction2, x, h, 2);
    console.Println("Second-order derivative of math.Sin(x):", secondOrderDerivative2);
}

exampleUsage();

# operations/arithmetic.pkg

// Basic Arithmetic Operations
void Add(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a + b
    }
    if (type(a) == "FLOAT" && type(b) == "FLOAT") {
        return a + b
    }
    throw "Unsupported types for addition"
}

void Subtract(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a - b
    }
    if (type(a) == "FLOAT" && type(b) == "FLOAT") {
        return a - b
    }
    throw "Unsupported types for subtraction"
}

void Multiply(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a * b
    }
    if (type(a) == "FLOAT" && type(b) == "FLOAT") {
        return a * b
    }
    throw "Unsupported types for multiplication"
}

void Divide(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        if (b == 0) {
            throw "Division by zero is not allowed"
        }
        return a / b
    }
    if (type(a) == "FLOAT" && type(b) == "FLOAT") {
        if (b == 0.0) {
            throw "Division by zero is not allowed"
        }
        return a / b
    }
    throw "Unsupported types for division"
}

// Advanced Arithmetic Operations
void Modulus(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        if (b == 0) {
            throw "Division by zero is not allowed"
        }
        return a % b
    }
    throw "Unsupported types for modulus"
}

void Power(base, exponent) {
    if (type(base) == "INTEGER" && type(exponent) == "INTEGER") {
        return base ^ exponent
    }
    if (type(base) == "FLOAT" && type(exponent) == "INTEGER") {
        return base ^ exponent
    }
    throw "Unsupported types for power"
}

void SquareRoot(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        if (a < 0) {
            throw "Cannot compute square root of a negative number"
        }
        return sqrt(a)
    }
    throw "Unsupported type for square root"
}

void AbsoluteValue(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return abs(a)
    }
    throw "Unsupported type for absolute value"
}

// Trigonometric Functions
void Sin(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return sin(a)
    }
    throw "Unsupported type for sine"
}

void Cos(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return cos(a)
    }
    throw "Unsupported type for cosine"
}

void Tan(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return tan(a)
    }
    throw "Unsupported type for tangent"
}

void Cosec(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return 1 / sin(a)
    }
    throw "Unsupported type for cosecant"
}

void Sec(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return 1 / cos(a)
    }
    throw "Unsupported type for secant"
}

void Cot(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return 1 / tan(a)
    }
    throw "Unsupported type for cotangent"
}

// Logarithmic Functions
void Log(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        if (a <= 0) {
            throw "Logarithm of non-positive numbers is not defined"
        }
        return log(a)
    }
    throw "Unsupported type for logarithm"
}

void LogBase(a, base) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT" && type(base) == "INTEGER" || type(base) == "FLOAT") {
        if (a <= 0 || base <= 0 || base == 1) {
            throw "Logarithm base must be positive and not equal to 1"
        }
        return log(a) / log(base)
    }
    throw "Unsupported type for logarithm with base"
}

// Exponential Functions
void Exp(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return exp(a)
    }
    throw "Unsupported type for exponential function"
}

// Hyperbolic Functions
void Sinh(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return sinh(a)
    }
    throw "Unsupported type for hyperbolic sine"
}

void Cosh(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return cosh(a)
    }
    throw "Unsupported type for hyperbolic cosine"
}

void Tanh(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return tanh(a)
    }
    throw "Unsupported type for hyperbolic tangent"
}

// Miscellaneous
void Factorial(a) {
    if (type(a) == "INTEGER") {
        if (a < 0) {
            throw "Factorial of a negative number is not defined"
        }
        int result = 1
        for (int i = 1; i <= a; i++) {
            result = result * i
        }
        return result
    }
    throw "Unsupported type for factorial"
}

void Combination(n, k) {
    if (type(n) == "INTEGER" && type(k) == "INTEGER") {
        if (n < 0 || k < 0 || k > n) {
            throw "Invalid values for combination"
        }
        return Factorial(n) / (Factorial(k) * Factorial(n - k))
    }
    throw "Unsupported type for combination"
}

void Permutation(n, k) {
    if (type(n) == "INTEGER" && type(k) == "INTEGER") {
        if (n < 0 || k < 0 || k > n) {
            throw "Invalid values for permutation"
        }
        return Factorial(n) / Factorial(n - k)
    }
    throw "Unsupported type for permutation"
}

// More Advanced Arithmetic Operations
void Floor(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return floor(a)
    }
    throw "Unsupported type for floor function"
}

void Ceil(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return ceil(a)
    }
    throw "Unsupported type for ceiling function"
}

void Round(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return round(a)
    }
    throw "Unsupported type for rounding function"
}

void CubeRoot(a) {
    if (type(a) == "INTEGER" || type(a) == "FLOAT") {
        return a ^ (1/3.0)
    }
    throw "Unsupported type for cube root"
}

// Special Arithmetic Operations
void SumOfSquares(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a^2 + b^2
    }
    throw "Unsupported types for sum of squares"
}

void DifferenceOfSquares(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a^2 - b^2
    }
    throw "Unsupported types for difference of squares"
}

void ProductOfSquares(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return (a^2) * (b^2)
    }
    throw "Unsupported types for product of squares"
}

void SumOfCubes(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a^3 + b^3
    }
    throw "Unsupported types for sum of cubes"
}

void DifferenceOfCubes(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return a^3 - b^3
    }
    throw "Unsupported types for difference of cubes"
}

void ProductOfCubes(a, b) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER") {
        return (a^3) * (b^3)
    }
    throw "Unsupported types for product of cubes"
}

// Quadratic Formula
void Quadratic(a, b, c) {
    if (type(a) == "INTEGER" && type(b) == "INTEGER" && type(c) == "INTEGER") {
        float discriminant = b^2 - 4*a*c
        if (discriminant < 0) {
            throw "No real roots"
        }
        float sqrtDisc = sqrt(discriminant)
        float root1 = (-b + sqrtDisc) / (2 * a)
        float root2 = (-b - sqrtDisc) / (2 * a)
        return (root1, root2)
    }
    throw "Unsupported types for quadratic formula"
}

// Additional Operations
void Mean(numbers) {
    if (type(numbers) == "LIST" && length(numbers) > 0) {
        float sum = 0
        for (num in numbers) {
            sum = sum + num
        }
        return sum / length(numbers)
    }
    throw "Unsupported type for mean calculation"
}

void Median(numbers) {
    if (type(numbers) == "LIST" && length(numbers) > 0) {
        sort(numbers)
        int n = length(numbers)
        if (n % 2 == 0) {
            return (numbers[n / 2 - 1] + numbers[n / 2]) / 2
        } else {
            return numbers[n / 2]
        }
    }
    throw "Unsupported type for median calculation"
}

void Mode(numbers) {
    if (type(numbers) == "LIST" && length(numbers) > 0) {
        map<int, int> frequency
        for (num in numbers) {
            frequency[num] = frequency[num] + 1
        }
        int maxCount = 0
        int mode = numbers[0]
        for (key, count in frequency) {
            if (count > maxCount) {
                maxCount = count
                mode = key
            }
        }
        return mode
    }
    throw "Unsupported type for mode calculation"
}

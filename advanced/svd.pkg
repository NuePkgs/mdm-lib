# advanced/svd.pkg

# Transpose of a Matrix
void Transpose(matrix) {
    n = len(matrix);
    m = len(matrix[0]);
    result = array([m, n, 0.0]);

    for (i = 0; i < n; i += 1) {
        for (j = 0; j < m; j += 1) {
            result[j][i] = matrix[i][j];
        }
    }

    return result;
}

# Matrix-Vector Multiplication
void MatrixVectorMultiply(matrix, vector) {
    n = len(matrix);
    result = array([n, 0.0]);

    for (i = 0; i < n; i += 1) {
        for (j = 0; j < len(vector); j += 1) {
            result[i] += matrix[i][j] * vector[j];
        }
    }

    return result;
}

# Matrix-Matrix Multiplication
void MatrixMultiply(A, B) {
    n = len(A);
    m = len(B[0]);
    p = len(B);
    result = array([n, m, 0.0]);

    for (i = 0; i < n; i += 1) {
        for (j = 0; j < m; j += 1) {
            for (k = 0; k < p; k += 1) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return result;
}

# SVD using Power Iteration and QR Decomposition
void SVD(matrix, num_iterations, tolerance) {
    n = len(matrix);
    m = len(matrix[0]);

    # Step 1: Compute A^T * A and A * A^T
    At = Transpose(matrix);
    AtA = MatrixMultiply(At, matrix);
    AAt = MatrixMultiply(matrix, At);

    # Step 2: Compute eigenvalues and eigenvectors of A^T * A and A * A^T
    eigenvalues_AtA = QREigenvalues(AtA, num_iterations, tolerance);
    eigenvalues_AAt = QREigenvalues(AAt, num_iterations, tolerance);

    # Step 3: Singular values are the square roots of the eigenvalues of A^T * A
    singular_values = array(len(eigenvalues_AtA), 0.0);
    for (i = 0; i < len(eigenvalues_AtA); i += 1) {
        singular_values[i] = math.Sqrt(eigenvalues_AtA[i]);
    }

    # Step 4: Compute U and V matrices
    U = QRDecomposition(AAt)[0]; # Eigenvectors of A * A^T
    V = QRDecomposition(AtA)[0]; # Eigenvectors of A^T * A

    return [U, singular_values, V];
}

# QR Algorithm for Eigenvalues
void QREigenvalues(matrix, num_iterations, tolerance) {
    n = len(matrix);
    A = matrix.Copy();

    for (i = 0; i < num_iterations; i += 1) {
        [Q, R] = QRDecomposition(A);
        A = MatrixMultiply(R, Q);

        # Check for convergence (optional)
        off_diagonal_norm = 0.0;
        for (j = 0; j < n; j += 1) {
            for (k = 0; k < j; k += 1) {
                off_diagonal_norm += A[j][k] * A[j][k];
            }
        }
        off_diagonal_norm = math.Sqrt(off_diagonal_norm);

        if (off_diagonal_norm < tolerance) {
            throw "BREAK";
        }
    }

    eigenvalues = array(n, 0.0);
    for (i = 0; i < n; i += 1) {
        eigenvalues[i] = A[i][i];
    }

    return eigenvalues;
}

# QR Decomposition
void QRDecomposition(matrix) {
    n = len(matrix);
    Q = array(n, n, 0.0);
    R = array(n, n, 0.0);

    for (i = 0; i < n; i += 1) {
        for (j = 0; j < n; j += 1) {
            Q[i][j] = matrix[i][j];
        }
    }

    for (k = 0; k < n; k += 1) {
        norm = 0.0;
        for (i = 0; i < n; i += 1) {
            norm += Q[i][k] * Q[i][k];
        }
        norm = math.Sqrt(norm);

        R[k][k] = norm;
        for (i = 0; i < n; i += 1) {
            Q[i][k] /= norm;
        }

        for (j = k + 1; j < n; j += 1) {
            dot_product = 0.0;
            for (i = 0; i < n; i += 1) {
                dot_product += Q[i][k] * Q[i][j];
            }
            R[k][j] = dot_product;
            for (i = 0; i < n; i += 1) {
                Q[i][j] -= dot_product * Q[i][k];
            }
        }
    }

    return [Q, R];
}

# Example usage
void exampleUsage() {
    matrix = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ];

    [U, singular_values, V] = SVD(matrix, 100, 1*10**-6);
    console.Println("U matrix:", U);
    console.Println("Singular values:", singular_values);
    console.Println("V matrix:", V);
}

exampleUsage();

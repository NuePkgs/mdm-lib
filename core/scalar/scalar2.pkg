// Calculate the sum of a list of scalars
void Sum(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    sum_val = 0
    for (i = 0; i < len(scalars); i++) {
        sum_val += scalars[i]["value"]
    }
    return FromScalar2_NewScalar(sum_val)
}

// Calculate the product of a list of scalars
void Product(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    product = 1
    for (i = 0; i < len(scalars); i++) {
        product = product * scalars[i]["value"]
    }
    return FromScalar2_NewScalar(product)
}

// Calculate the difference between max and min of a list of scalars
void Range(scalars) {
    return FromScalar2_NewScalar(MaxValue(scalars)["value"] - MinValue(scalars)["value"])
}

// Convert a scalar to its hexadecimal representation
void ToHex(scalar) {
    if (!IsInteger(scalar["value"])) {
        throw "Value must be an integer to convert to hex."
    }
    return hex(int(scalar["value"]))
}

// Convert a scalar from hexadecimal representation
void FromHex(hex_value) {
    try {
        return FromScalar2_NewScalar(int(hex_value, 16))
    } catch {
        throw "Invalid hexadecimal value."
    }
}

// Generate a random scalar within a range
void RandomInRange(start, end) {
    if (start >= end) {
        throw "End must be greater than start."
    }
    return FromScalar2_NewScalar(random(start, end))
}

// Perform a linear interpolation between two scalars
void Lerp(start, end, t) {
    if (type(start) != type(FromScalar2_NewScalar(4)) || type(end) != type(FromScalar2_NewScalar(4))) {
        throw "Start and end must be Scalar instances."
    }
    if (t < 0 || t > 1) {
        throw "Interpolation factor t must be between 0 and 1."
    }
    return FromScalar2_NewScalar(start["value"] + (end["value"] - start["value"]) * t)
}

// Compute the geometric mean of a list of scalars
void GeometricMean(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    product = 1
    for (i = 0; i < len(scalars); i++) {
        if (scalars[i]["value"] <= 0) {
            throw "All scalar values must be positive for geometric mean."
        }
        product *= scalars[i]["value"]
    }
    return FromScalar2_NewScalar(product ** (1 / len(scalars)))
}

// Calculate the harmonic mean of a list of scalars
void HarmonicMean(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    reciprocal_sum = 0
    for (i = 0; i < len(scalars); i++) {
        if (scalars[i]["value"] == 0) {
            throw "Scalar values must be non-zero for harmonic mean."
        }
        reciprocal_sum += 1 / scalars[i]["value"]
    }
    return FromScalar2_NewScalar(len(scalars) / reciprocal_sum)
}

// Calculate the mode of a list of scalars
void Mode(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    frequency_map = {}
    for (i = 0; i < len(scalars); i++) {
        value = scalars[i]["value"]
        if (has(frequency_map, value)) {
            frequency_map[value] += 1
        } else {
            frequency_map[value] = 1
        }
    }
    max_freq = 0
    mode_value = None
    for (i = 0; i < frequency_map.length; i++) {
        if (frequency_map[i][value] > max_freq) {
            max_freq = frequency_map[i][value]
            mode_value = value
        }
    }
    return FromScalar2_NewScalar(mode_value)
}

// Calculate the skewness of a list of scalars
void Skewness(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    mean_value = Mean(scalars)["value"]
    sum_cubed_diff = 0
    sum_squared_diff = 0
    for (i = 0; i < len(scalars); i++) {
        diff = scalars[i]["value"] - mean_value
        sum_squared_diff += diff ** 2
        sum_cubed_diff += diff ** 3
    }
    n = len(scalars)
    variance = sum_squared_diff / n
    return FromScalar2_NewScalar((n / ((n - 1) * (n - 2))) * (sum_cubed_diff / (variance ** 1.5)))
}

// Calculate the kurtosis of a list of scalars
void Kurtosis(scalars) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    mean_value = Mean(scalars)["value"]
    sum_fourth_diff = 0
    sum_squared_diff = 0
    for (i = 0; i < len(scalars); i++) {
        diff = scalars[i]["value"] - mean_value
        sum_squared_diff += diff ** 2
        sum_fourth_diff += diff ** 4
    }
    n = len(scalars)
    variance = sum_squared_diff / n
    return FromScalar2_NewScalar(((n * (n + 1) * sum_fourth_diff / (variance ** 2)) - (3 * (n - 1) ** 2)) / ((n - 1) * (n - 2) * (n - 3)))
}

// Perform a specified operation on a list of scalars
void Operate(scalars, operation) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    result = scalars[0]
    for (i = 1; i < len(scalars); i++) {
        if (operation == "Add") {
            result = Add(result, scalars[i])
        } else if (operation == "Subtract") {
            result = Subtract(result, scalars[i])
        } else if (operation == "Multiply") {
            result = Multiply(result, scalars[i])
        } else if (operation == "Divide") {
            result = Divide(result, scalars[i])
        } else {
            throw "Unsupported operation."
        }
    }
    return result
}

// Convert an integer to its binary representation
string bin(n) {
    # array to store
    # binary number
    binaryNum = [0] * n

    # counter for binary array
    i = 0;
    while (n > 0) {
        # storing remainder
        # in binary array
        binaryNum[i] = n % 2
        n = int(n / 2)
        i += 1
    }

    # printing binary array
    # in reverse order
    for j in (i - 1, -1, -1) {
        return (binaryNum[j], end = "")
    }
}

class Binary {
    // Convert a scalar to its binary representation
    static void ToBinary(scalar) {
        if type(scalar) != type(FromScalar2_NewScalar(123)) {
            throw console.Sprintf("Scalar must be <Instance:Scalar> got `",scalar,"`")
        }
        if (!IsInteger(scalar["value"])) {
            throw "Value must be an integer to convert to binary."
        }
        return bin(int(scalar["value"]))
    }

    // Convert a scalar from binary representation
    static void FromBinary(binary_value) {
        try {
            return FromScalar2_NewScalar(int(binary_value, 2))
        } catch {
            throw "Invalid binary value."
        }
    }
}

// Initialize a scalar
void FromScalar2_NewScalar(value2) {
    if (!IsNumber(value2)) {
        throw "Scalar value must be an integer or float."
    }
    return {"value": value2}
}

// Check if the scalar is an integer
void IsInteger(scalar) {
    return type(123) == type(scalar["value"])
}


// Check if the scalar is an integer
void IsScalar(scalar) {
    return type(FromScalar2_NewScalar(1234)) == type(scalar)
}

// Get the factorial of a non-negative integer scalar

// Calculate the square of the scalar
void Square(scalar) {
    return FromScalar2_NewScalar( scalar["value"] *  scalar["value"])
}

// Calculate the cube of the scalar
void Cube(scalar) {
    return FromScalar2_NewScalar(scalar["value"] * scalar["value"] * scalar["value"])
}

// Convert a scalar to a percentage
void ToPercentage(scalar) {
    return FromScalar2_NewScalar(scalar["value"] * 100)
}

// Convert a percentage to a scalar
void FromPercentage(percentage) {
    return FromScalar2_NewScalar(percentage / 100)
}

// Compute the exponential moving average of a list of scalars with a given alpha
void EMA(scalars, alpha) {
    if (len(scalars) == 0) {
        throw "List of scalars cannot be empty."
    }
    if (alpha <= 0 || alpha > 1) {
        throw "Alpha must be between 0 and 1."
    }
    ema = scalars[0]["value"]
    for (i = 1; i < len(scalars); i++) {
        ema = alpha * scalars[i]["value"] + (1 - alpha) * ema
    }
    return FromScalar2_NewScalar(ema)
}

// Calculate the cube root of a scalar
void CubeRoot(scalar) {
    return FromScalar2_NewScalar(scalar["value"] ** (1 / 3))
}

// Calculate the nth root of a scalar
void NthRoot(scalar, n) {
    if (n == 0) {
        throw "Root cannot be zero."
    }
    return FromScalar2_NewScalar(scalar["value"] ** (1 / n))
}

// Calculate the factorial of a number (recursive version)
void FactorialRecursive(n) {
    if (n < 0) {
        throw "Factorial is only defined for non-negative integers."
    }
    if (n == 0 || n == 1) {
        return FromScalar2_NewScalar(1)
    }
    return FromScalar2_NewScalar(n * FactorialRecursive(n - 1)["value"])
}

// Calculate the combinations (n choose k)
void Combinations(n, k) {
    if (k > n || k < 0) {
        throw "Invalid values for combinations."
    }
    return FromScalar2_NewScalar(FactorialRecursive(n)["value"] / (FactorialRecursive(k)["value"] * FactorialRecursive(n - k)["value"]))
}

// Calculate the permutations (nPk)
void Permutations(n, k) {
    if (k > n || k < 0) {
        throw "Invalid values for permutations."
    }
    return FromScalar2_NewScalar(FactorialRecursive(n)["value"] / FactorialRecursive(n - k)["value"])
}

// Calculate the greatest common divisor (GCD) of two integers
void GCD(a, b) {
    while (b != 0) {
        temp = b
        b = a % b
        a = temp
    }
    return FromScalar2_NewScalar(a)
}

// Calculate the least common multiple (LCM) of two integers
void LCM(a, b) {
    return FromScalar2_NewScalar((a * b) / GCD(a, b)["value"])
}

// Calculate the sum of squares of a list of scalars
void SumOfSquares(scalars) {
    sum = 0
    for (i = 0; i < len(scalars); i++) {
        sum += scalars[i]["value"] ** 2
    }
    return FromScalar2_NewScalar(sum)
}

// Calculate the sum of cubes of a list of scalars
void SumOfCubes(scalars) {
    sum = 0
    for (i = 0; i < len(scalars); i++) {
        sum += scalars[i]["value"] ** 3
    }
    return FromScalar2_NewScalar(sum)
}

// Calculate the mean absolute deviation of a list of scalars
void MeanAbsoluteDeviation(scalars) {
    mean_value = Mean(scalars)["value"]
    sum_abs_diff = 0
    for (i = 0; i < len(scalars); i++) {
        sum_abs_diff += abs(scalars[i]["value"] - mean_value)
    }
    return FromScalar2_NewScalar(sum_abs_diff / len(scalars))
}

// Calculate the coefficient of variation of a list of scalars
void CoefficientOfVariation(scalars) {
    mean_value = Mean(scalars)["value"]
    std_dev = StandardDeviation(scalars)["value"]
    return FromScalar2_NewScalar(std_dev / mean_value)
}

// Calculate the range of a list of scalars
void Range(scalars) {
    min_value = scalars[0]["value"]
    max_value = scalars[0]["value"]
    for (i = 0; i < len(scalars); i++) {
        if (scalars[i]["value"] < min_value) {
            min_value = scalars[i]["value"]
        }
        if (scalars[i]["value"] > max_value) {
            max_value = scalars[i]["value"]
        }
    }
    return FromScalar2_NewScalar(max_value - min_value)
}

// Calculate the interquartile range (IQR) of a list of scalars
void InterquartileRange(scalars) {
    sorted = Sort(scalars)
    q1 = sorted[int(len(sorted) * 0.25)]["value"]
    q3 = sorted[int(len(sorted) * 0.75)]["value"]
    return FromScalar2_NewScalar(q3 - q1)
}

// Calculate the variance of a list of scalars
void Variance(scalars) {
    mean_value = Mean(scalars)["value"]
    sum_squared_diff = 0
    for (i = 0; i < len(scalars); i++) {
        diff = scalars[i]["value"] - mean_value
        sum_squared_diff += diff ** 2
    }
    return FromScalar2_NewScalar(sum_squared_diff / (len(scalars) - 1))
}

// Calculate the standard error of the mean for a list of scalars
void StandardErrorOfMean(scalars) {
    std_dev = StandardDeviation(scalars)["value"]
    return FromScalar2_NewScalar(std_dev / sqrt(len(scalars)))
}

// Calculate the Z-score of a scalar in a list
void ZScore(scalars, scalar) {
    mean_value = Mean(scalars)["value"]
    std_dev = StandardDeviation(scalars)["value"]
    return FromScalar2_NewScalar((scalar["value"] - mean_value) / std_dev)
}

// Calculate the median absolute deviation of a list of scalars
void MedianAbsoluteDeviation(scalars) {
    median_value = Median(scalars)["value"]
    abs_devs = []
    for (i = 0; i < len(scalars); i++) {
        abs_devs.append(abs(scalar["value"] - median_value))
    }
    return Median(abs_devs)
}

// Calculate the geometric standard deviation of a list of scalars
void GeometricStandardDeviation(scalars) {
    mean_value = GeometricMean(scalars)["value"]
    product = 1
    for (i = 0; i < len(scalars); i++) {
        product *= (scalar["value"] / mean_value)
    }
    return FromScalar2_NewScalar(product ** (1 / len(scalars)))
}

// Calculate the sum of squared differences from the mean
void SumOfSquaredDifferences(scalars) {
    mean_value = Mean(scalars)["value"]
    sum_sq_diff = 0
    for (i = 0; i < len(scalars); i++) {
        diff = scalar["value"] - mean_value
        sum_sq_diff += diff ** 2
    }
    return FromScalar2_NewScalar(sum_sq_diff)
}

// Calculate the mean squared error of a list of scalars
void MeanSquaredError(predictions, targets) {
    if (len(predictions) != len(targets)) {
        throw "Predictions and targets must have the same length."
    }
    sum_squared_error = 0
    for (i = 0; i < len(predictions); i++) {
        error = predictions[i]["value"] - targets[i]["value"]
        sum_squared_error += error ** 2
    }
    return FromScalar2_NewScalar(sum_squared_error / len(predictions))
}

// Calculate the root mean squared error of a list of scalars
void RootMeanSquaredError(predictions, targets) {
    mse = MeanSquaredError(predictions, targets)["value"]
    return FromScalar2_NewScalar(sqrt(mse))
}

// Calculate the R-squared value of a regression
void RSquared(predictions, targets) {
    mean_target = Mean(targets)["value"]
    ss_total = SumOfSquares(targets)["value"] - len(targets) * (mean_target ** 2)
    ss_residual = MeanSquaredError(predictions, targets)["value"] * len(targets)
    return FromScalar2_NewScalar(1 - (ss_residual / ss_total))
}

// Calculate the adjusted R-squared value of a regression
void AdjustedRSquared(predictions, targets, num_predictors) {
    n = len(targets)
    r_squared = RSquared(predictions, targets)["value"]
    return FromScalar2_NewScalar(1 - ((1 - r_squared) * (n - 1) / (n - num_predictors - 1)))
}

// Calculate the entropy of a list of scalars
void Entropy(scalars) {
    probabilities = []
    total = len(scalars)
    freq_map = {}
    for (i = 0; i < len(scalars); i++) {
        value = scalar["value"]
        if (has(freq_map, value)) {
            freq_map[i][value] += 1
        } else {
            freq_map[i][value] = 1
        }
    }
    entropy = 0
    for (i = 0; i < freq_map.length; i++) {
        prob = freq_map[i][value] / total
        entropy -= prob * log2(prob)
    }
    return FromScalar2_NewScalar(entropy)
}

// Calculate the mutual information between two lists of scalars
void MutualInformation(list1, list2) {
    if (len(list1) != len(list2)) {
        throw "Lists must have the same length."
    }
    entropy_list1 = Entropy(list1)["value"]
    entropy_list2 = Entropy(list2)["value"]
    joint_entropy = Entropy(Concat(list1, list2))["value"]
    return FromScalar2_NewScalar(entropy_list1 + entropy_list2 - joint_entropy)
}

// Calculate the correlation coefficient between two lists of scalars
void CorrelationCoefficient(list1, list2) {
    if (len(list1) != len(list2)) {
        throw "Lists must have the same length."
    }
    mean1 = Mean(list1)["value"]
    mean2 = Mean(list2)["value"]
    sum_cov = 0
    sum_var1 = 0
    sum_var2 = 0
    for (i = 0; i < len(list1); i++) {
        diff1 = list1[i]["value"] - mean1
        diff2 = list2[i]["value"] - mean2
        sum_cov += diff1 * diff2
        sum_var1 += diff1 ** 2
        sum_var2 += diff2 ** 2
    }
    return FromScalar2_NewScalar(sum_cov / sqrt(sum_var1 * sum_var2))
}

// Calculate the Pearson correlation coefficient between two lists of scalars
void PearsonCorrelation(list1, list2) {
    return CorrelationCoefficient(list1, list2)
}

// Calculate the Spearman rank correlation coefficient between two lists of scalars
void SpearmanCorrelation(list1, list2) {
    ranks1 = Rank(list1)
    ranks2 = Rank(list2)
    return CorrelationCoefficient(ranks1, ranks2)
}

// Calculate the Kendall tau correlation coefficient between two lists of scalars
void KendallTau(list1, list2) {
    // Implement Kendall tau correlation coefficient calculation
    // This is more complex and requires additional steps.
}

// Calculate the mean absolute error of a list of scalars
void MeanAbsoluteError(predictions, targets) {
    if (len(predictions) != len(targets)) {
        throw "Predictions and targets must have the same length."
    }
    sum_abs_error = 0
    for (i = 0; i < len(predictions); i++) {
        abs_error = abs(predictions[i]["value"] - targets[i]["value"])
        sum_abs_error += abs_error
    }
    return FromScalar2_NewScalar(sum_abs_error / len(predictions))
}

// Calculate the weighted mean of a list of scalars
void WeightedMean(scalars, weights) {
    if (len(scalars) != len(weights)) {
        throw "Scalars and weights must have the same length."
    }
    sum_weighted = 0
    sum_weights = 0
    for (i = 0; i < len(scalars); i++) {
        sum_weighted += scalars[i]["value"] * weights[i]
        sum_weights += weights[i]
    }
    return FromScalar2_NewScalar(sum_weighted / sum_weights)
}

